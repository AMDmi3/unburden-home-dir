# -*- shell-script -*-
# /etc/X11/Xsession.d/95unburden_home_dir
# This file is sourced by Xsession(5), not executed.
#
# This file causes a list of directories to be removed or moved off
# the users home directory into a given other directory. Usually this
# is used to relief NFS home directories of the burden of caches and
# other performance needing directories.
#
# Copyright (C) 2010 by Axel Beckert <beckert@phys.ethz.ch>,
# Department of Physics, ETH Zurich.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#

BASENAME=unburden_home_dir
TARGETDIR=/tmp
FILELAYOUT='.unburden-%u/%s'
DEBUG=

if [ -e /etc/default/"${BASENAME}" ]; then
        . /etc/default/"${BASENAME}"
fi

if [ -e /etc/"${BASENAME}" ]; then
        . /etc/"${BASENAME}"
fi

if [ -e "${HOME}/.${BASENAME}" ]; then
        . "${HOME}/.${BASENAME}"
fi

# Set proper umask when creating files or directories. Save current
# umask before.
OLDUMASK=$(umask)
umask 077

warn() {
    echo "$1" 1>&2
}

report_problem() {
    warn "WARNING: Can't handle $1: $2"
}

report_serious_problem() {
    warn "ERROR: Can't handle $1: $2"
}

create_symlink_and_parents() {
    create_parent_directories "$2"
    ${DEBUG} ln -vi "$1" "$2"
}

create_parent_directories() {
    ${DEBUG} mkdir -pv $(dirname "$1")
}

possibly_create_non_existing_stuff() {
    # Shall we create not yet existing directories or files as symlink?
    # Case 1: directory
    if [ "$1" = "D" ]; then
	${DEBUG} mkdir -pv "$3"
	create_symlink_and_parents "$3" "$2"

    # Case 2: file
    elif [ "$1" = "F" ]; then
	create_parent_directories "$3"
	${DEBUG} touch "$3"
	create_symlink_and_parents "$3" "$2"
    fi
    return 0
}

fix_dangling_links() {
    link="$(readlink "$2")"
    # Check if link target is wanted target
    if [ "${link}" != "$3" ]; then
	report_problem "$2" "${link} not equal $3"
	return 1
    fi

    # Check if target exists and is same type
    if [ -e "$3" ]; then
	# Case 1: directory
	if [ "$1" = "d" -o "$1" = 'D' ]; then
	    # Does target exist?
	    if [ ! -d "$3" ]; then
		report_problem "$2" "Unexpected type (not a directory)"
		return 1
	    fi
	# Case 2: file
	elif [ "$1" = "f" -o "$1" = 'F' ]; then
	    # Does target exist?
	    if [ ! -f "$3" ]; then
		report_problem "$2" "Unexpected type (not a regular file)"
		return 1
	    fi
	fi
    # Symlink is there, but file or directory not
    else
	# Case 1: directory
	if [ "$1" = "d" -o "$1" = 'D' ]; then
	    ${DEBUG} mkdir -pv "$3"
	# Case 2: file
	elif [ "$1" = "f" -o "$1" = 'F' ]; then
	    create_parent_directories "$3"
	    ${DEBUG} touch "$3"
	fi
    fi
    return 0
}

do_it() {
    if [ "$1" = "d" -o "$1" = 'D' ]; then
	if [ -d "$2" ]; then
	    if [ "$4" = "r" -o "$4" = "d" ]; then
		${DEBUG} rm -rv "$2"
		${DEBUG} mkdir -pv "$3"
	    elif [ "$4" = "m" ]; then
		create_parent_directories "$3"
		${DEBUG} mv -v "$2" "$3"
	    else
		warn "Unknown action '$4'. This should never happen."
		return 255
	    fi
	    ${DEBUG} ln -vs "$3" "$2"
	else
	    report_serious_problem "$2" "Unexpected type (not a directory)"
	    return 1
	fi
    elif [ "$1" = "f" -o "$1" = 'F' ]; then
	if [ -f "$2" ]; then
	    if [ "$4" = "r" -o "$4" = "d" ]; then
		${DEBUG} rm -v "$2"
		create_parent_directories "$3"
		${DEBUG} touch "$3"
	    elif [ "$4" = "m" ]; then
		create_parent_directories "$3"
		${DEBUG} mv -v "$2" "$3"
	    else
		warn "Unknown action '$4'. This should never happen."
		return 255
	    fi
	    ${DEBUG} ln -vs "$3" "$2"
	else
	    report_serious_problem "$2" "Unexpected type (not a file)"
	    return 1
	fi
    else
	warn "This should never happen."
	return 255
    fi
    return 0
}

replace() {
    # replace $type $i $item $replacement
    type="$1"
    itemexpanded="$2"
    itemglob="$3"
    replacement="$4"
    action="$5"

    # Skip entries where wildcard where passed
    if echo "${itemexpanded}" | egrep '[][*?]' -q; then
	warn "Skipping '${itemexpanded}' due to unmatched wildcard."
	return 0
    fi

    target="${TARGETDIR}/$(echo "${FILELAYOUT}" | \
                           sed "s|%u|$(id -un)|g;s|%s|${replacement}|g;")"

    # Replace %<n> (e.g. %1) with the n-th wildcard match. Uses perl
    # here as it would be too complicated and way less readable if
    # written as (bourne) shell script.

    target="$(perl -e '

	my $itemglob     = $ARGV[0];
	my $itemexpanded = $ARGV[1];
	my $target       = $ARGV[2];

	# Change from globbing to regexp
	$itemglob =~ s/\?/(.)/;
	$itemglob =~ s/\*/(.*)/;

	my @result = $itemexpanded =~ m($itemglob)g;

	$target =~ s/\%(\d+)/$result[$1-1]/eg;

	print $target;

    ' "${itemglob}" "${itemexpanded}" "${target}")"

    # Check if the source exists
    if [ ! -e "${itemexpanded}" ]; then
	possibly_create_non_existing_stuff "${type}" "${itemexpanded}" "${target}"
    # Check if source is already a symlink
    elif [ -L "$2" ]; then
	fix_dangling_links "${type}" "${itemexpanded}" "${target}"

    # TODO: Check available disk space
    # Should use report_serious_problem

    # No symlink yet, then actually move or remove!
    else
	do_it "${type}" "${itemexpanded}" "${target}" "${action}"
    fi
}


if [ "${UNBURDEN_HOME_DIR}" != "false" -a \
     "${UNBURDEN_HOME_DIR}" != "no" ]; then

    for list in "/etc/${BASENAME}_list" "${HOME}/.${BASENAME}_list"; do
	test -r "${list}" || continue

	# Clean up this and that
	grep -v '^#' "${list}" | while read action type item replacement ; do
	    if [ -z "${action}" ]; then
		continue
	    fi
	    if [ -z "${item}" -o -z "${replacement}" ]; then
		warn "Can't parse '${type} ${item} ${replacement}', skipping..."
		continue
	    fi
	    if [ "${type}" != "d" -a  "${type}" != "f" -a \
		 "${type}" != "D" -a  "${type}" != "F" ]; then
		warn "Can't parse type '${type}', must be 'd', 'D', 'f' or 'F', skipping..."
		continue
	    fi
	    if [ "${action}" != "d" -a "${action}" != "r" -a "${action}" != "m"  ]; then
		warn "Can't parse action '${action}', must be 'd', 'r' or 'm', skipping..."
		continue
	    fi

	    for i in ${HOME}/${item}; do
		replace "${type}" "${i}" "${item}" "${replacement}" "${action}"
	    done
	done
    done
fi

# Restore original umask
umask "$OLDUMASK"
